{"remainingRequest":"C:\\Users\\luohoang\\Documents\\Project\\Th-lao-Fiber\\web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\luohoang\\Documents\\Project\\Th-lao-Fiber\\web\\node_modules\\vue-excel-export\\VueComment.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\luohoang\\Documents\\Project\\Th-lao-Fiber\\web\\node_modules\\vue-excel-export\\VueComment.vue","mtime":1608279312075},{"path":"C:\\Users\\luohoang\\Documents\\Project\\Th-lao-Fiber\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1608279293549},{"path":"C:\\Users\\luohoang\\Documents\\Project\\Th-lao-Fiber\\web\\node_modules\\babel-loader\\lib\\index.js","mtime":1608279291206},{"path":"C:\\Users\\luohoang\\Documents\\Project\\Th-lao-Fiber\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1608279293549},{"path":"C:\\Users\\luohoang\\Documents\\Project\\Th-lao-Fiber\\web\\node_modules\\vue-loader\\lib\\index.js","mtime":1608279312175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["VueComment.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VueComment.vue","sourceRoot":"node_modules/vue-excel-export","sourcesContent":["<template>\r\n    <div\r\n            :id=\"idName\"\r\n            @click=\"generate\">\r\n        <slot>\r\n            Download {{name}}\r\n        </slot>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import download from \"browser-downloads\";\r\n\r\n    export default {\r\n        name: 'export-excel',\r\n        props: {\r\n            // mime type [xls, csv]\r\n            type: {\r\n                type: String,\r\n                default: \"xls\"\r\n            },\r\n            // Json to download\r\n            data: {\r\n                type: Array,\r\n                required: false,\r\n                default: null\r\n            },\r\n            // fields inside the Json Object that you want to export\r\n            // if no given, all the properties in the Json are exported\r\n            fields: {\r\n                type: Object,\r\n                required: false\r\n            },\r\n            // this prop is used to fix the problem with other components that use the\r\n            // variable fields, like vee-validate. exportFields works exactly like fields\r\n            exportFields: {\r\n                type: Object,\r\n                required: false\r\n            },\r\n            // Use as fallback when the row has no field values\r\n            defaultValue: {\r\n                type: String,\r\n                required: false,\r\n                default: \"\"\r\n            },\r\n            // Title(s) for the data, could be a string or an array of strings (multiple titles)\r\n            title: {\r\n                default: null\r\n            },\r\n            // Footer(s) for the data, could be a string or an array of strings (multiple footers)\r\n            footer: {\r\n                default: null\r\n            },\r\n            // filename to export\r\n            name: {\r\n                type: String,\r\n                default: \"data.xls\"\r\n            },\r\n            fetch: {\r\n                type: Function,\r\n            },\r\n            meta: {\r\n                type: Array,\r\n                default: () => []\r\n            },\r\n            worksheet: {\r\n                type: String,\r\n                default: \"Sheet1\"\r\n            },\r\n            //event before generate was called\r\n            beforeGenerate: {\r\n                type: Function,\r\n            },\r\n            //event before download pops up\r\n            beforeFinish: {\r\n                type: Function,\r\n            },\r\n        },\r\n        computed: {\r\n            // unique identifier\r\n            idName() {\r\n                var now = new Date().getTime();\r\n                return \"export_\" + now;\r\n            },\r\n\r\n            downloadFields() {\r\n                if (this.fields !== undefined) return this.fields;\r\n\r\n                if (this.exportFields !== undefined) return this.exportFields;\r\n            }\r\n        },\r\n        methods: {\r\n            async generate() {\r\n                if (typeof this.beforeGenerate === 'function') {\r\n                    await this.beforeGenerate();\r\n                }\r\n                let data = this.data;\r\n                if (typeof this.fetch === 'function' || !data)\r\n                    data = await this.fetch();\r\n\r\n                if (!data || !data.length) {\r\n                    return;\r\n                }\r\n\r\n                let json = this.getProcessedJson(data, this.downloadFields);\r\n                if (this.type === \"html\") {\r\n                    // this is mainly for testing\r\n                    return this.export(\r\n                        this.jsonToXLS(json),\r\n                        this.name.replace(\".xls\", \".html\"),\r\n                        \"text/html\"\r\n                    );\r\n                } else if (this.type === \"csv\") {\r\n                    return this.export(\r\n                        this.jsonToCSV(json),\r\n                        this.name.replace(\".xls\", \".csv\"),\r\n                        \"application/csv\"\r\n                    );\r\n                }\r\n                return this.export(\r\n                    this.jsonToXLS(json),\r\n                    this.name,\r\n                    \"application/vnd.ms-excel\"\r\n                );\r\n            },\r\n            /*\r\n                Use downloadjs to generate the download link\r\n                */\r\n            export: async function (data, filename, mime) {\r\n                let blob = this.base64ToBlob(data, mime);\r\n                if (typeof this.beforeFinish === 'function')\r\n                    await this.beforeFinish();\r\n                download(blob, filename, mime);\r\n            },\r\n            /*\r\n                jsonToXLS\r\n                ---------------\r\n                Transform json data into an xml document with MS Excel format, sadly\r\n                it shows a prompt when it opens, that is a default behavior for\r\n                Microsoft office and cannot be avoided. It's recommended to use CSV format instead.\r\n                */\r\n            jsonToXLS(data) {\r\n                let xlsTemp =\r\n                    '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\"><head><meta name=ProgId content=Excel.Sheet> <meta name=Generator content=\"Microsoft Excel 11\"><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>${worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--><style>br {mso-data-placement: same-cell;}</style></head><body><table>${table}</table></body></html>';\r\n                let xlsData = \"<thead>\";\r\n                const colspan = Object.keys(data[0]).length;\r\n                let _self = this;\r\n\r\n                //Header\r\n                if (this.title != null) {\r\n                    xlsData += this.parseExtraData(\r\n                        this.title,\r\n                        '<tr><th colspan=\"' + colspan + '\">${data}</th></tr>'\r\n                    );\r\n                }\r\n\r\n                //Fields\r\n                xlsData += \"<tr>\";\r\n                for (let key in data[0]) {\r\n                    xlsData += \"<th>\" + key + \"</th>\";\r\n                }\r\n                xlsData += \"</tr>\";\r\n                xlsData += \"</thead>\";\r\n\r\n                //Data\r\n                xlsData += \"<tbody>\";\r\n                data.map(function (item, index) {\r\n                    xlsData += \"<tr>\";\r\n                    for (let key in item) {\r\n                        xlsData += \"<td>\" + _self.valueReformattedForMultilines(item[key]) + \"</td>\";\r\n                    }\r\n                    xlsData += \"</tr>\";\r\n                });\r\n                xlsData += \"</tbody>\";\r\n\r\n                //Footer\r\n                if (this.footer != null) {\r\n                    xlsData += \"<tfoot>\";\r\n                    xlsData += this.parseExtraData(\r\n                        this.footer,\r\n                        '<tr><td colspan=\"' + colspan + '\">${data}</td></tr>'\r\n                    );\r\n                    xlsData += \"</tfoot>\";\r\n                }\r\n\r\n                return xlsTemp.replace(\"${table}\", xlsData).replace(\"${worksheet}\", this.worksheet);\r\n            },\r\n            /*\r\n                jsonToCSV\r\n                ---------------\r\n                Transform json data into an CSV file.\r\n                */\r\n            jsonToCSV(data) {\r\n                var csvData = [];\r\n                //Header\r\n                if (this.title != null) {\r\n                    csvData.push(this.parseExtraData(this.title, \"${data}\\r\\n\"));\r\n                }\r\n                //Fields\r\n                for (let key in data[0]) {\r\n                    csvData.push(key);\r\n                    csvData.push(\",\");\r\n                }\r\n                csvData.pop();\r\n                csvData.push(\"\\r\\n\");\r\n                //Data\r\n                data.map(function (item) {\r\n                    for (let key in item) {\r\n                        let escapedCSV = '=\\\"' + item[key] + '\\\"'; // cast Numbers to string\r\n                        if (escapedCSV.match(/[,\"\\n]/)) {\r\n                            escapedCSV = '\"' + escapedCSV.replace(/\\\"/g, '\"\"') + '\"';\r\n                        }\r\n                        csvData.push(escapedCSV);\r\n                        csvData.push(\",\");\r\n                    }\r\n                    csvData.pop();\r\n                    csvData.push(\"\\r\\n\");\r\n                });\r\n                //Footer\r\n                if (this.footer != null) {\r\n                    csvData.push(this.parseExtraData(this.footer, \"${data}\\r\\n\"));\r\n                }\r\n                return csvData.join(\"\");\r\n            },\r\n            /*\r\n                getProcessedJson\r\n                ---------------\r\n                Get only the data to export, if no fields are set return all the data\r\n                */\r\n            getProcessedJson(data, header) {\r\n                let keys = this.getKeys(data, header);\r\n                let newData = [];\r\n                let _self = this;\r\n                data.map(function (item, index) {\r\n                    let newItem = {};\r\n                    for (let label in keys) {\r\n                        let property = keys[label];\r\n                        newItem[label] = _self.getValue(property, item);\r\n                    }\r\n                    newData.push(newItem);\r\n                });\r\n\r\n                return newData;\r\n            },\r\n            getKeys(data, header) {\r\n                if (header) {\r\n                    return header;\r\n                }\r\n\r\n                let keys = {};\r\n                for (let key in data[0]) {\r\n                    keys[key] = key;\r\n                }\r\n                return keys;\r\n            },\r\n            /*\r\n                parseExtraData\r\n                ---------------\r\n                Parse title and footer attribute to the csv format\r\n                */\r\n            parseExtraData(extraData, format) {\r\n                let parseData = \"\";\r\n                if (Array.isArray(extraData)) {\r\n                    for (var i = 0; i < extraData.length; i++) {\r\n                        parseData += format.replace(\"${data}\", extraData[i]);\r\n                    }\r\n                } else {\r\n                    parseData += format.replace(\"${data}\", extraData);\r\n                }\r\n                return parseData;\r\n            },\r\n\r\n            getValue(key, item) {\r\n                const field = typeof key !== \"object\" ? key : key.field;\r\n                let indexes = typeof field !== \"string\" ? [] : field.split(\".\");\r\n                let value = this.defaultValue;\r\n\r\n                if (!field)\r\n                    value = item;\r\n                else if (indexes.length > 1)\r\n                    value = this.getValueFromNestedItem(item, indexes);\r\n                else\r\n                    value = this.parseValue(item[field]);\r\n\r\n                if (key.hasOwnProperty('callback'))\r\n                    value = this.getValueFromCallback(value, key.callback);\r\n\r\n                return value;\r\n            },\r\n\r\n            /*\r\n            convert values with newline \\n characters into <br/>\r\n            */\r\n            valueReformattedForMultilines(value) {\r\n                if (typeof (value) == \"string\") return (value.replace(/\\n/ig, \"<br/>\"));\r\n                else return (value);\r\n            },\r\n\r\n            getValueFromNestedItem(item, indexes) {\r\n                let nestedItem = item;\r\n                for (let index of indexes) {\r\n                    if (nestedItem)\r\n                        nestedItem = nestedItem[index];\r\n                }\r\n                return this.parseValue(nestedItem);\r\n            },\r\n\r\n            getValueFromCallback(item, callback) {\r\n                if (typeof callback !== \"function\")\r\n                    return this.defaultValue\r\n                const value = callback(item);\r\n                return this.parseValue(value);\r\n            },\r\n            parseValue(value) {\r\n                return value || value === 0 || typeof value === 'boolean'\r\n                    ? value\r\n                    : this.defaultValue;\r\n            },\r\n            base64ToBlob(data, mime) {\r\n                let base64 = window.btoa(window.unescape(encodeURIComponent(data)));\r\n                let bstr = atob(base64);\r\n                let n = bstr.length;\r\n                let u8arr = new Uint8ClampedArray(n);\r\n                while (n--) {\r\n                    u8arr[n] = bstr.charCodeAt(n);\r\n                }\r\n                return new Blob([u8arr], {type: mime});\r\n            }\r\n        } // end methods\r\n    };\r\n</script>\r\n"]}]}